/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pakageFirst;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dell
 */
public class MainFrame extends javax.swing.JFrame {
    private String nameB,authorB,yearB,majorB,quantityB;
    private String nameBD,addressBD,phoneBD;
    private int idBDNow = 0,idSNow = 0;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
//        try {
//            FileOutputStream fos = new FileOutputStream("SACH.DAT");
//            fos.close();
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//       
//        try {
//            FileOutputStream fos = new FileOutputStream("BANDOC.DAT");
//            fos.close();
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        try {
//            FileOutputStream fos = new FileOutputStream("QLMS.DAT");
//            fos.close();
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        BanDoc = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        bookName = new javax.swing.JTextField();
        author = new javax.swing.JTextField();
        year = new javax.swing.JTextField();
        quantity = new javax.swing.JTextField();
        major = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        soLuong = new javax.swing.JTextField();
        ADDQL = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TenBDCBB = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        TenSachCBB = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        name = new javax.swing.JTextField();
        address = new javax.swing.JTextField();
        phone = new javax.swing.JTextField();
        addBtnBD = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BanDoc.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        bookName.setToolTipText("");
        bookName.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        bookName.setMinimumSize(new java.awt.Dimension(100, 22));
        bookName.setPreferredSize(new java.awt.Dimension(100, 22));
        bookName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookNameActionPerformed(evt);
            }
        });

        author.setToolTipText("");
        author.setPreferredSize(new java.awt.Dimension(100, 22));

        year.setToolTipText("");
        year.setPreferredSize(new java.awt.Dimension(100, 22));

        quantity.setPreferredSize(new java.awt.Dimension(100, 22));
        quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityActionPerformed(evt);
            }
        });

        major.setPreferredSize(new java.awt.Dimension(100, 22));

        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IDS", "NameS", "AuthorS", "MajorS", "YearS", "QuantityS"
            }
        ));
        jTable1.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jTable1.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(author, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(major, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(113, 113, 113)
                                .addComponent(addBtn)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(author, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(major, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(addBtn)
                        .addGap(24, 24, 24)))
                .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        BanDoc.addTab("Sach", jPanel1);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MaBD", "TenBD", "TenSach", "Soluong"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jLabel1.setText("Ten Ban Doc");

        jLabel2.setText("Ten sach");

        jButton1.setText("Sort By Name");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Sort By Quantity");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("So luong");

        soLuong.setMinimumSize(new java.awt.Dimension(100, 22));
        soLuong.setPreferredSize(new java.awt.Dimension(100, 22));
        soLuong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soLuongActionPerformed(evt);
            }
        });

        ADDQL.setText("ADD");
        ADDQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDQLActionPerformed(evt);
            }
        });

        TenBDCBB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TenBDCBBActionPerformed(evt);
            }
        });
        jScrollPane4.setViewportView(TenBDCBB);

        TenSachCBB.setMinimumSize(new java.awt.Dimension(61, 22));
        TenSachCBB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TenSachCBBActionPerformed(evt);
            }
        });
        jScrollPane5.setViewportView(TenSachCBB);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(ADDQL)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(soLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 191, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(146, 146, 146))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(soLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addComponent(ADDQL)
                .addGap(0, 65, Short.MAX_VALUE))
        );

        BanDoc.addTab("QLMS", jPanel3);

        name.setPreferredSize(new java.awt.Dimension(100, 22));
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        address.setPreferredSize(new java.awt.Dimension(100, 22));
        address.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressActionPerformed(evt);
            }
        });

        phone.setPreferredSize(new java.awt.Dimension(100, 22));
        phone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneActionPerformed(evt);
            }
        });

        addBtnBD.setText("Add");
        addBtnBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnBDActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IDBD", "NameBD", "AddressBD", "PhoneBD"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(158, 158, 158)
                        .addComponent(addBtnBD))
                    .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtnBD))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91))
        );

        BanDoc.addTab("BanDoc", jPanel2);
        BanDoc.addTab("tab4", jTabbedPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BanDoc)
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BanDoc)
                .addContainerGap())
        );

        BanDoc.getAccessibleContext().setAccessibleName("BanDoc");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void phoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneActionPerformed

    private void addressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
        jTable1 = new JTable(defaultTableModel);
        row = new String[6];
        if(checkEx()){
            int i = defaultTableModel.getRowCount();
            System.out.println(i);
            List<Sach> listSach = new ArrayList<>();
            listSach = getSach("SACH.DAT");
            Sach sachN = new Sach(nameB,authorB,majorB,yearB,quantityB);
            sachN.setIdSach(idSNow+1);
            listSach.add(sachN);
            TenSachCBB.addItem(sachN.getNameB());
            jPanel3.add(jScrollPane5);
            addToFileSach(listSach, "SACH.DAT");
            //for(Sach sach : listSach){
                row[0] = String.valueOf(sachN.getIdSach());
                row[1] = sachN.getNameB();
                row[2] = sachN.getAuthorB();
                row[3] = sachN.getMajorB();
                row[4] = sachN.getYearB();
                row[5] = sachN.getQuantityB();
                defaultTableModel.addRow(row);
        }
        else System.out.println("0");
    }//GEN-LAST:event_addBtnActionPerformed

    private void quantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityActionPerformed

    private void bookNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookNameActionPerformed

    private void addBtnBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnBDActionPerformed
        // TODO add your handling code here
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        jTable2 = new JTable(model);
        rowBD = new String[4];
        if(checkExBD()){
            BanDoc banDoc = new BanDoc(nameBD, addressBD, phoneBD);
            List<BanDoc> listBD = new ArrayList<>();
            listBD = getBanDoc("BANDOC.DAT");
            listBD.add(banDoc);
            List<String> listName = new ArrayList<>();
            TenBDCBB.addItem(banDoc.getNameBD());
            jPanel3.add(jScrollPane4);
            addToFileBanDoc(listBD, "BANDOC.DAT");
            rowBD[0] = String.valueOf(banDoc.getIdBD());
            rowBD[1] = banDoc.getNameBD();
            rowBD[2] = banDoc.getAddressBD();
            rowBD[3] = banDoc.getPhoneBD();
            model.addRow(rowBD);
        }
        else System.out.println("0");
    }//GEN-LAST:event_addBtnBDActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        List<QLMS> listQL = getQL("QLMS.DAT");
        int i = jTable3.getRowCount();
        DefaultTableModel model =(DefaultTableModel) jTable3.getModel();
        String row[] = new String[4];
        for(int j = 0; j < i; j++)  model.removeRow(0);
        Collections.sort(listQL,new SortByName());
        for(QLMS ql: listQL){
            row[0] = String.valueOf(ql.getIdBD());
            row[1] = ql.getTenbandoc();
            row[2] = ql.getTenSach();
            row[3] = String.valueOf(ql.getSoluong());
            model.addRow(row);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void TenSachCBBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TenSachCBBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TenSachCBBActionPerformed

    private void TenBDCBBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TenBDCBBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TenBDCBBActionPerformed

    private void ADDQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDQLActionPerformed
        if(checkQL()){
            int idNow = 0;
            List<BanDoc> listBD = getBanDoc("BANDOC.DAT");
            String row[] = new String[4];
            String nameBD = TenBDCBB.getItemAt(TenBDCBB.getSelectedIndex());
            for(BanDoc bd : listBD){
                if(bd.getNameBD().equals(nameBD)){
                    idNow = bd.getIdBD();
                    row[0] = String.valueOf(bd.getIdBD());
                    break;
                }
            }
            QLMS ql = new QLMS();
            ql.setIdBD(idNow);
            List<QLMS> listQl = getQL("QLMS.DAT");
            listQl.add(ql);
            addToFileQL(listQl, "QLMS.DAT");
            row[1] = nameBD;
            row[2] = TenSachCBB.getItemAt(TenSachCBB.getSelectedIndex());
            row[3] = soLuong.getText();
            DefaultTableModel model =(DefaultTableModel) jTable3.getModel();
            model.addRow(row);
        }
    }//GEN-LAST:event_ADDQLActionPerformed

    private void soLuongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soLuongActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_soLuongActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        List<QLMS> listQL = getQL("QLMS.DAT");
        int i = jTable3.getRowCount();
        DefaultTableModel model =(DefaultTableModel) jTable3.getModel();
        String row[] = new String[4];
        for(int j = 0; j < i; j++)  model.removeRow(0);
        Collections.sort(listQL,new SortBySL());
        for(QLMS ql: listQL){
            row[0] = String.valueOf(ql.getIdBD());
            row[1] = ql.getTenbandoc();
            row[2] = ql.getTenSach();
            row[3] = String.valueOf(ql.getSoluong());
            model.addRow(row);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    String row[],rowBD[];   
    public boolean checkExBD(){
        try{
            nameBD = name.getText();
            addressBD = address.getText();
            phoneBD = phone.getText();
            try {
                ExStringEqualNull(nameBD);
            } catch (ExUsage ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            ExStringEqualNull(addressBD);
            ExStringEqualNull(phoneBD);
        } catch (ExUsage ex) {
            return false;
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }
    public boolean checkEx(){
        try{
            nameB = bookName.getText();
            authorB = author.getText();
            majorB = major.getText();
            yearB = year.getText();
            quantityB = quantity.getText();
            ExStringEqualNull(nameB);
            ExStringEqualNull(authorB);
            ExStringEqualNull(majorB);
            ExStringEqualNull(yearB);
            ExStringEqualNull(quantityB);
        } catch (ExUsage ex) {
            bookName.requestFocus();
            return false;
        }
        return true;
    }
    public boolean checkQL(){
        try{
            ExStringEqualNull(soLuong.getText());
        } catch (ExUsage ex) {
            soLuong.requestFocus();
            return false;
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }
    private class ExUsage extends Exception{
        public ExUsage(String s){
            super(s);
        }
    }
    public void ExStringEqualNull(String s) throws ExUsage{
        if(s.length()==0)   throw new ExUsage(s);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    private List<Sach> getSach(String path){
        List<Sach> myList = new ArrayList<>();
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(path);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        boolean cont = true;
        ObjectInputStream ois = null;
        try {
            ois = new ObjectInputStream(fis);
            while(cont){
                Sach sach = new Sach();
                sach = (Sach) ois.readObject();
                if(sach!=null){  myList.add(sach); idSNow = sach.getIdSach();}
                else cont = false;
            }
        } catch (Exception ex) {
        }
        if(idSNow == 0) idSNow = 10000;
        return myList;
    }
    private List<BanDoc> getBanDoc(String path){
        List<BanDoc> myList = new ArrayList<>();
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(path);
        } catch (FileNotFoundException ex) {
        }
        boolean cont = true;
        ObjectInputStream ois = null;
        try {
            ois = new ObjectInputStream(fis);
            while(cont){
                BanDoc bandoc = new BanDoc();
                bandoc = (BanDoc) ois.readObject();
                if(bandoc!=null){  myList.add(bandoc); idBDNow = bandoc.getIdBD();}
                else cont = false;
            }
        } catch (Exception ex) {
        }
        if(idBDNow==0)  idBDNow = 10000;
        return myList;
    }
    private List<QLMS> getQL(String path){
        List<QLMS> myList = new ArrayList<>();
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(path);
        } catch (FileNotFoundException ex) {
        }
        boolean cont = true;
        ObjectInputStream ois = null;
        try {
            ois = new ObjectInputStream(fis);
            while(cont){
                QLMS ql = new QLMS();
                ql = (QLMS) ois.readObject();
                if(ql!=null){  myList.add(ql);}
                else cont = false;
            }
        } catch (Exception ex) {
        }
        if(idBDNow==0)  idBDNow = 10000;
        return myList;
    }
    private void addToFileSach(List<Sach> list,String path){
        try {
            FileOutputStream fos = new FileOutputStream(path);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            for(Sach sa: list){
                oos.writeObject(sa);
            }
            oos.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void addToFileBanDoc(List<BanDoc> list,String path){
        try {
            FileOutputStream fos = new FileOutputStream(path);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            for(BanDoc bd: list){
                oos.writeObject(bd);
            }
            oos.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void addToFileQL(List<QLMS> list,String path){
        try {
            FileOutputStream fos = new FileOutputStream(path);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            for(QLMS ql: list){
                oos.writeObject(ql);
            }
            oos.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADDQL;
    private javax.swing.JTabbedPane BanDoc;
    private javax.swing.JComboBox<String> TenBDCBB;
    private javax.swing.JComboBox<String> TenSachCBB;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton addBtnBD;
    private javax.swing.JTextField address;
    private javax.swing.JTextField author;
    private javax.swing.JTextField bookName;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField major;
    private javax.swing.JTextField name;
    private javax.swing.JTextField phone;
    private javax.swing.JTextField quantity;
    private javax.swing.JTextField soLuong;
    private javax.swing.JTextField year;
    // End of variables declaration//GEN-END:variables
class SortByName implements Comparator<QLMS>{
    QLMS o1 = null,o2 = null;
    @Override
    public int compare(QLMS o1, QLMS o2) {
        return o1.getTenbandoc().compareTo(o2.getTenbandoc());
    }
    
}
class SortBySL implements Comparator<QLMS>{

    @Override
    public int compare(QLMS o1, QLMS o2) {
        return o1.getSoluong() > o2.getSoluong() ? 1 : -1;
    }
    
}
}
